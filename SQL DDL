--create schema

CREATE SCHEMA IF NOT EXISTS ECOMM_SCHEMA;

GRANT USAGE ON ALL SCHEMAS IN DATABASE DB_VN252_NS to ROLE R_VN252_NS;
GRANT ALL ON ALL TABLES IN SCHEMA DB_VN252_NS.ECOMM_SCHEMA to ROLE R_VN252_NS;

USE WAREHOUSE WH_VN252_NS;
USE DATABASE DB_VN252_NS;
USE SCHEMA ECOMM_SCHEMA;

--CREATE ROLE ANALYST;

--show grants to role r_vn252_ns;
--CUSTOMERS TABLE

CREATE OR REPLACE TABLE DB_VN252_NS.ECOMM_SCHEMA.CUSTOMERS
( ID NUMBER NOT NULL,
  FIRST_NAME varchar(50) NOT NULL,
  LAST_NAME varchar(50),
  EMAIL VARCHAR(100),
  AGE NUMBER NOT NULL,
  GENDER CHARACTER(1),
  STATE VARCHAR(50),
  CITY VARCHAR(50),
  COUNTRY VARCHAR(50),
  CREATED_AT DATE
);

CREATE OR REPLACE FILE FORMAT CSV_FILE_FORMAT
    TYPE=CSV,
    SKIP_HEADER=1,
    FIELD_DELIMITER=',',
    TRIM_SPACE=FALSE,
    FIELD_OPTIONALLY_ENCLOSED_BY=NONE,
    REPLACE_INVALID_CHARACTERS=TRUE,
    DATE_FORMAT=AUTO,
    TIME_FORMAT=AUTO,
    TIMESTAMP_FORMAT=AUTO;

COPY INTO DB_VN252_NS.ECOMM_SCHEMA.CUSTOMERS
FROM '@"DB_VN252_NS"."ECOMM_SCHEMA"."INT_STAGE"'
FILES = ('Users/users.csv')
FILE_FORMAT = (FORMAT_NAME = CSV_FILE_FORMAT)
ON_ERROR=ABORT_STATEMENT;

SELECT COUNT(*) FROM DB_VN252_NS.ECOMM_SCHEMA.CUSTOMERS;

-- Dynamic Data Masking
CREATE MASKING POLICY email_masking_policy AS (val VARCHAR) RETURNS VARCHAR -> 
CASE WHEN CURRENT_ROLE() NOT IN ('R_VN252_NS') THEN '****@****.***' ELSE val END;

ALTER TABLE ECOMM_SCHEMA.CUSTOMERS MODIFY COLUMN EMAIL SET MASKING POLICY email_masking_policy;


CREATE OR REPLACE TABLE DB_VN252_NS.ECOMM_SCHEMA.ORDERS
( ORDER_ID INTEGER NOT NULL PRIMARY KEY,
  USER_ID INTEGER NOT NULL,
  STATUS VARCHAR(50),
  GENDER VARCHAR(1),
  CREATED_DT DATE,
  RETURNED_DT DATE,
  SHIPPED_DT DATE,
  DELIVERED_DT DATE,
  QUANTITY NUMBER(38,0) NOT NULL DEFAULT 0
);

COPY INTO DB_VN252_NS.ECOMM_SCHEMA.ORDERS
FROM '@"DB_VN252_NS"."ECOMM_SCHEMA"."INT_STAGE"'
FILES = ('Orders/orders.csv')
FILE_FORMAT = (FORMAT_NAME = CSV_FILE_FORMAT)
ON_ERROR=ABORT_STATEMENT;

SELECT * FROM DB_VN252_NS.ECOMM_SCHEMA.ORDERS;


CREATE OR REPLACE TABLE DB_VN252_NS.ECOMM_SCHEMA.ORDERITEMS
( ORDERITEMS_ID INTEGER NOT NULL PRIMARY KEY,
  ORDER_ID INTEGER NOT NULL,  
  USER_ID INTEGER NOT NULL,
  PRODUCT_ID INTEGER NOT NULL,
  STATUS VARCHAR(50),
  CREATED_DT DATE,
  SHIPPED_DT DATE,
  DELIVERED_DT DATE,
  RETURNED_DT DATE,
  SALE_PRICE FLOAT NOT NULL DEFAULT 0
);

COPY INTO DB_VN252_NS.ECOMM_SCHEMA.ORDERITEMS
FROM '@"DB_VN252_NS"."ECOMM_SCHEMA"."INT_STAGE"'
FILES = ('OrderItems/order_items.csv')
FILE_FORMAT = (FORMAT_NAME = CSV_FILE_FORMAT)
ON_ERROR=ABORT_STATEMENT;

SELECT * FROM DB_VN252_NS.ECOMM_SCHEMA.ORDERITEMS;

CREATE OR REPLACE TABLE DB_VN252_NS.ECOMM_SCHEMA.PRODUCTS
(
  ID INTEGER NOT NULL PRIMARY KEY,
  COST_PRICE FLOAT NOT NULL DEFAULT 0,
  CATEGORY VARCHAR(50),
  NAME VARCHAR (500),
  BRAND VARCHAR (50),
  RRP FLOAT NOT NULL DEFAULT 0,
  DEPARTMENT VARCHAR (50),
  SKU VARCHAR (200),
  DIST_CENTRE_ID INTEGER NOT NULL
)
CLUSTER BY (BRAND, DEPARTMENT);

COPY INTO "DB_VN252_NS"."ECOMM_SCHEMA"."PRODUCTS"
FROM '@"DB_VN252_NS"."ECOMM_SCHEMA"."INT_STAGE"'
FILES = ('Products/products.csv')
FILE_FORMAT = (FORMAT_NAME = CSV_FILE_FORMAT
)
ON_ERROR=ABORT_STATEMENT;

SELECT COUNT(*) FROM DB_VN252_NS.ECOMM_SCHEMA.PRODUCTS;

CREATE OR REPLACE TABLE DB_VN252_NS.ECOMM_SCHEMA.DIST_CENTRES
(
  CENTRE_ID INTEGER NOT NULL PRIMARY KEY,
  NAME VARCHAR(200)
);

COPY INTO "DB_VN252_NS"."ECOMM_SCHEMA"."DIST_CENTRES"
FROM '@"DB_VN252_NS"."ECOMM_SCHEMA"."INT_STAGE"'
FILES = ('Centres/distribution_centres.csv')
FILE_FORMAT = (FORMAT_NAME = CSV_FILE_FORMAT
)
ON_ERROR=ABORT_STATEMENT;

SELECT * FROM DB_VN252_NS.ECOMM_SCHEMA.DIST_CENTRES;
